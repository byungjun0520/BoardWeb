<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

<!--  
 lazy-init 속성 : 빈이 사용되는 시점에 객체를 생성하도록 하는 속성
 true : 스프링 컨테이너는 해당 빈을 미리생성하지 않고 클라이언트에 요청이
           있는 시점에서 생성함
 false : 등록할때 클라이언트 요청이 있기 전에 미리 생성됨
-->
<!-- init-method="initMethod" 
destroy-method="destoryMethod" 
lazy-init="true" -->

    <!--
       생성자 인젝션
       <constructor-arg  index="0"  ref="apple"></constructor-arg>
       <constructor-arg  index="1" value="400000"></constructor-arg>
 -->
 
<!-- 
<bean id="tv" class="polymorphism.SamsungTV"  
p:speaker-ref="apple" p:price="300000"
init-method="initMethod" destroy-method="destoryMethod"  scope="prototype">
  -->
 <!--      <property name="speaker" ref="apple"></property>
      <property name="price" value="250000"></property> 
  -->
  <!-- </bean> -->
<!-- 
<bean id="sony" class="polymorphism.SonySpeaker" />

<bean id="apple" class="polymorphism.AppleSpeaker" />

 -->
 <!-- 
 <bean id="collectionBean" class="com.global.ioc.injection.CollectionBean">
      <property name="addressList">
             <list>
                    <value>서울 탁별시 영당포구 당산동 당산빌딩 </value>        
                     <value>경상남도 거제군 통영  외도</value>
                     <value>서울 탁별시 강남구 강남길 45 -1</value>
             </list>
     </property>
 </bean>
  -->
 <!-- 
 <bean id="collectionBean" class="com.global.ioc.injection.CollectionBean">
      <property name="addressList">
             <set value-type="java.lang.String">
                    <value>인천 광역시 </value>        
                     <value>서울 특별시</value>
                     <value>서울 탁별시 강남구 강남길 45 -1</value>
             </set>
     </property>
 </bean>
  -->
  
  <!-- map
 <bean id="collectionBean" class="com.global.ioc.injection.CollectionBean">
      <property name="addressList">
           <map>
                <entry>
                     <key>
                        <value>인길동</value>
                     </key>
                    <value>인천 광역시 </value>        
                 </entry>    
                     
                     <entry>
                     <key>
                     <value>서길동</value>
                     </key>
                     <value>서울 특별시</value>
                     </entry>
                     
                     <entry>
                     <key>
                     <value>강길동</value>
                     </key>
                     <value>서울 탁별시 강남구 강남길 45 -1</value>
                     </entry>
           </map>
           </property>
            </bean>
            -->
            
         <!--    <bean id="collectionBean" class="com.global.ioc.injection.CollectionBean">
      <property name="addressList">
           <props>
               <prop key="인길동">인천광역시</prop>
           <prop key="서길동">서울특별시</prop>
           <prop key="강길동">서울 강남</prop>
           </props>
           
           </property>
            </bean> -->
     <!-- <context:component-scan base-package="polymorphism"></context:component-scan> -->
     
      <!-- <bean class="polymorphism.SonySpeaker"></bean> -->
     <!--  <bean class="polymorphism.AppleSpeaker"></bean> -->
     
     <context:component-scan base-package="com.global.biz"></context:component-scan>
     
     <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
     <!-- 위의 엘리먼트를 선언하면 스프링 컨테이너는 AOP 관련 어노테이션들을 인식하고 
               용도에 맞게 처리해줌 -->
     
     <!-- DataSource 설정 -->
     
     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
     destroy-method="close">
     
     <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
     <property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"></property>
     <property name="username" value="scott"></property>
     <property name="password" value="tiger"></property>
     </bean>
     
     <!-- <bean id="userService" class="com.global.biz.user.impl.UserServiceImpl">
         <property name="userDAO" ref="userDAO" />
     </bean>
     
     <bean id="userDAO" class="com.global.biz.user.impl.UserDAO" /> -->
     
     <!-- <bean id="log" class="com.global.biz.comon.LogAdvice"></bean>
     <aop:config>
            <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut" />
            <aop:aspect ref="log">
                  <aop:before method="printLog" pointcut-ref="allPointcut"/>
            </aop:aspect>     
     </aop:config> -->
     
    <!--  <bean id="log" class="com.global.biz.comon.Log4jAdvice"></bean>
     <aop:config>
        <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/>
        <aop:aspect ref="log">
             <aop:before method="printLogging" pointcut-ref="allPointcut"/>
        </aop:aspect>
     </aop:config> -->
     <!--
      * com.global.biz..*Impl.*(..)
     
     * : 리턴타입
     com.global.biz..  : 패키지 경로
     *Impl  : 클래스명
     
     *(..)   : 메소드명 및 매개변수
     get*(..) : get 메소드명 및 매개변수
      -->
     <!-- <bean id="log" class="com.global.biz.comon.LogAdvice"></bean>
     <aop:config> -->
           <!--  <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" 
            id="allPointcut" />
           
            <aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" 
            id="getPointcut" />
              -->
            <!--  <aop:aspect ref="log">
                  <aop:before method="printLog" pointcut-ref="allPointcut"/>
            </aop:aspect>   
            
             <aop:aspect ref="log">
                  <aop:before method="printLog" pointcut-ref="getPointcut"/>
            </aop:aspect>  
            -->
         <!--    
            <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" 
            id="allPointcut"/>
            <aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" 
            id="getPointcut"/>
            
            <aop:aspect ref="log">
                  <aop:after method="printLog" pointcut-ref="getPointcut"/>
            </aop:aspect>
             --> 
          <!--     <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" 
            id="allPointcut"/> -->
           <!-- 
           <aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" 
            id="getPointcut"/>
             -->
         <!--    <aop:aspect ref="log">
                  <aop:before method="printLog" pointcut-ref="allPointcut"/>
            </aop:aspect>
             
             
     </aop:config> -->
     
    <!--  <bean id="before" class="com.global.biz.comon.BeforeAdvice"> </bean>
     
    <aop:config>
     
         <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/>
     
         <aop:aspect ref="before">
             <aop:before method="beforeLog" pointcut-ref="allPointcut"/>
         </aop:aspect>
     </aop:config> -->
     
   <!--   <bean id="afterReturning" class="com.global.biz.comon.AfterReturningAdvice">
      </bean>
     <aop:config>
        <aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/>
        <aop:aspect ref="afterReturning">
           <aop:after-returning method="afterLog" pointcut-ref="getPointcut" returning="returnObj"/>
        </aop:aspect>
      
     </aop:config>-->
     
      
     <!--  <bean id="afterThrowing" class="com.global.biz.comon.AfterThrowingAdvice"></bean> -->
      <!-- <bean id="after" class="com.global.biz.comon.AfterAdvice"></bean> -->
      <!-- <aop:config>
      
      <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" 
      id="allPointcut"/>
      
      <aop:aspect ref="afterThrowing">
         <aop:after-throwing method="exceptionLog" throwing="exceptObj"
         pointcut-ref="allPointcut"/>
      </aop:aspect>
       -->
    <!--   <aop:aspect ref="after">
            <aop:after method="finallyLog" pointcut-ref="allPointcut"/>
      </aop:aspect>
     -->  
      
    <!--   </aop:config> -->
   <!--    
      <bean id="around" class="com.global.biz.comon.AroundAdvice"></bean>
      
       <aop:config>
          <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/>
           <aop:aspect ref="around">
              <aop:around method="aroundLog" pointcut-ref="allPointcut"/>
           </aop:aspect>
       </aop:config>
       -->
     </beans>
